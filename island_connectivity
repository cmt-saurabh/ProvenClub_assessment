// Online C++ compiler to run C++ program online
#include <iostream>
#include <bits/stdc++.h>

using namespace std;

class DisjointSet{
    int n;
    int *size;
    int *parent;
    
    public:
    DisjointSet(int n){
        this->n = n;
        this->size = new int[n];
        this->parent = new int[n];
        
        for(int i=0;i<n;i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    
    int findParent(int x){
        if(parent[x] == x) return parent[x];
        
        return parent[x] = findParent(parent[x]);
    }
    
    int getSize(int idx){
        return size[idx];
    }
    
    bool Union(int x, int y){
        int setx = findParent(x);
        int sety = findParent(y);
        
        if(setx == sety) return true;
        
        if(size[setx] > size[sety]){
            size[setx] += size[sety];
            parent[sety] = setx;
        }
        else{
            size[sety] += size[setx];
            parent[setx] = sety;
        }
        
        return false;
    }
};
int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};
int m,n;
bool check(int i, int j){
    if(i < 0 || i >= m || j < 0 || j >= n) return false;
    
    return true;
}
void solve(vector <vector <int>>& grid,int i, int j, DisjointSet dj){
    
    grid[i][j] = '0';
    int idx = i*n + j;
    for(int i=0;i<4;i++){
        int x = i + dx[i];
        int y = j + dy[j];
        if(!check(x,y) || grid[x][y] == '0') continue;
        
        int newIdx = x*n + y;
        solve(grid, x, y, dj);
    }
}
int main() {
    // Write C++ code here
    std::cout << "Try programiz.pro";
    vector <vector <int>> grid = {
        {'1', '1', '0','0','0'},
        {'1', '1', '0', '0', '0'},
        {'0', '0', '1','0', '0'},
        {'0','0','0','1','1'}
    };
    m = grid.size();
    n= grid[0].size();
    DisjointSet dj(m*n + 2);
    
    set <pair<int,int>> st;
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(grid[i][j] == '0') continue;
            
            st.insert({i,j});
            solve(grid, i, j, dj);
        }
    }
    map <int,int> mu;
    int count = 0, mx = 0;
    
    for(auto cur : st){
        int idx = cur.first*n + cur.second;
            count++;
            mx = max(mx, dj.getSize(idx));
    }
    
    cout<<"Number of islands "<<count<<endl;
    cout<<"size of largest island"<<mx<<endl;
    return 0;
}
